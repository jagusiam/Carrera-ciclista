package contrarrelojv2;

import java.util.Scanner;

/* Un programa para llevar la clasificación de una carrera contrarreloj ciclista.
 * La clase contrarreloj con el método main que forma el esquema principal 
 * de todo el programa.
 * El programa nos presenta un menú con varias opciones a ejecutar:
 * 1 - Mostrar la clasificación
 * 3 - Llegada de un corredor
 * 7 - Mostrar los corredores participantes
 * 8 – Mostrar información de un corredor
 * 9 - Mostrar información de un equipo
 * 99 - Salir del programa
 * @author aga
 */

public class ContrarrelojV2 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        //variables globales
        int opcion, dorsal, tiempo, puesto;
        
        int llegados = 0; // corredores llegados
        int ultima = -1; //ultima celda ocupada del array clasificacion
        
        int comprueba; //para saber si el dorsal es válido
        
        String nombre, equipo;

        CorredorV2 acorredores[];
        acorredores = new CorredorV2[6]; // el array de los corredores inscritos
        
        //el array con la clasificación provisional
        DortiV2 clasificacion [];
        clasificacion = new DortiV2 [6];
        DortiV2.inicializar (clasificacion);

        // cargar los datos de los corredores 
        CorredorV2.cargarDatos(acorredores); // rellena el array  acorredores
        
        Scanner teclado = new Scanner(System.in);
        
        /*Lo primero que muestra el programa es el menu de opciones*/
        opcion = CorredorV2.menu(); 

        while (opcion != 99) {
            switch (opcion) {
                case 0: // meter más datos de corredores, opcion oculta
                    break;
                
                /*CASE 1: hay un error en el programa original: falla la 
                    del primer puesto: aparcecen los datos de inicilización 
                    (-1, 999999), y luego ya no hay celda para alojar el ultimo
                    corredor en llegar - CORREGIDO*/
                case 1: // mostrar la clasificación
                    DortiV2.mostrarClasificacion(clasificacion, llegados);
                    break;
                case 2: // libre
                    break;
                case 3: // anotar la llegada de un corredor
                    System.out.println(" teclea dorsal: ");
                    dorsal = teclado.nextInt();
                    //comprobar que existe ese dorsal y que no esté ya anotado
                    comprueba = DortiV2.comprobarDorsal(dorsal, acorredores, clasificacion);
                    if (comprueba == 0) {
                        //el dorsal es correcto, lo procesamos
                        System.out.println(" teclea tiempo : ");
                        tiempo = teclado.nextInt();                       
                        llegados++;
                        puesto = DortiV2.clasificar(dorsal, tiempo, clasificacion, llegados);
                        nombre = CorredorV2.buscaN(dorsal, acorredores);
                        equipo = CorredorV2.buscaE(dorsal, acorredores);
                        System.out.println(">> " + puesto + " " + tiempo + " " + nombre + " " + equipo);
                        /* si el corredor no es el primero se debe mostrar 
                        a cuantos segundos está del 1º */
                        int sec = tiempo - clasificacion[0].tiempo;
                        if (tiempo > clasificacion[0].tiempo) {
                            System.out.println("El corredor está a " + sec + " segundos "
                                + "del primero.");   
                        }                        
                    } else {
                        //el dorsal no es válido o ya está anotado
                        System.out.println(" * * * dorsal no válido o ya llegó antes ");
                    }
                    break;
                case 4: // libre
                    break;
                case 5: // mostrar la información de un corredor
                //dorsal = leer dorsal();
                //mostrar_info(dorsal);
                case 6: // libre
                    break;
                case 7: // mostrar la lista de corredores de la carrera
                    CorredorV2.mostrarDatos(acorredores);
                    break;
                    
                /* CASE 8: hay un error en el programa original: funciona bien 
                    mientras no llegaron los corredores, cuando ya hay algun 
                    corredor que llegó - falla - imprime "dorsal no válido" - CORREGIDO*/    
                case 8: // muestra los datos de un corredor
                    System.out.println(" teclea dorsal : ");
                    dorsal = teclado.nextInt();
                    //comprobar que existe ese dorsal
                    comprueba = DortiV2.comprobarDorsal(dorsal, acorredores, clasificacion);
                    if (comprueba == 0) { //anotado, aunque aún no llegó
                        // el dorsal es correcto, lo procesamos
                        CorredorV2.mostrarUno(dorsal, acorredores);                 
                    } else if (comprueba == 2) { //anotado y ya llegó
                        CorredorV2.mostrarUno(dorsal, acorredores);
                    //si el corredor ya llegó, debería mostrarse en que puesto está y su tiempo     
                        for (int i=0; i<clasificacion.length; i++) {
                            if (dorsal == clasificacion[i].dorsal) {
                                System.out.println("Tiempo: " + clasificacion[i].tiempo + " Puesto: " + (i+1));
                            }
                        }                        
                    } else {
                        // el dorsal no es válido
                        System.out.println(" * * * dorsal no válido  ");
                    }
                    break;
                case 9: // mostrar información de un equipo
                    CorredorV2.infoEquipo(acorredores);                    
                    break;
                default:
                    // podemos mostrar un mensaje de error
                    break;
            } // fin del switch

            opcion = CorredorV2.menu(); //se vuelve a imprimir el menu

        } // del while 
        
    } //FIN DE LA MAIN
    
} //FIN DE LA CLASE
